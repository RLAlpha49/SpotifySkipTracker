// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

// Define Spotify-related types
interface SpotifyCredentials {
  clientId: string;
  clientSecret: string;
  redirectUri: string;
}

interface SpotifyPlaybackInfo {
  isPlaying: boolean;
  trackId: string;
  trackName: string;
  artistName: string;
  albumName: string;
  albumArt: string;
  progress: number;
  duration: number;
}

interface SkippedTrack {
  id: string;
  name: string;
  artist: string;
  skipCount: number;
  lastSkipped: string;
}

interface SpotifySettings {
  clientId: string;
  clientSecret: string;
  redirectUri: string;
  logLevel: "DEBUG" | "INFO" | "WARNING" | "ERROR" | "CRITICAL";
  logLineCount: number;
  skipThreshold: number;
  timeframeInDays: number;
  skipProgress: number;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;

  spotify: {
    // Authentication
    authenticate: (credentials?: SpotifyCredentials) => Promise<boolean>;
    logout: () => Promise<boolean>;
    isAuthenticated: () => Promise<boolean>;

    // Playback
    getCurrentPlayback: () => Promise<SpotifyPlaybackInfo | null>;

    // Skipped tracks
    getSkippedTracks: () => Promise<SkippedTrack[]>;
    saveSkippedTracks: (tracks: SkippedTrack[]) => Promise<boolean>;
    updateSkippedTrack: (track: SkippedTrack) => Promise<boolean>;

    // Settings
    saveSettings: (settings: SpotifySettings) => Promise<boolean>;
    getSettings: () => Promise<SpotifySettings>;

    // Logs
    saveLog: (message: string, level?: "DEBUG" | "INFO" | "WARNING" | "ERROR" | "CRITICAL") => Promise<boolean>;
    getLogs: (count?: number) => Promise<string[]>;
    clearLogs: () => Promise<boolean>;

    // App Control
    restartApp: () => Promise<boolean>;

    // Service
    startMonitoring: () => Promise<boolean>;
    stopMonitoring: () => Promise<boolean>;

    // Events
    onPlaybackUpdate: (
      callback: (data: SpotifyPlaybackInfo) => void,
    ) => () => void;
  };
}
