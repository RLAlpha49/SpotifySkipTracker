name: Check for Package Updates
on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      update-packages:
        description: "Automatically update package.json (creates PR)"
        required: false
        type: boolean
        default: true
  schedule:
    - cron: "0 0 * * 1"

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install npm-check-updates and tools
        run: |
          npm install -g npm-check-updates
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check for package updates
        id: check-updates
        run: |
          # Capture ncu output
          NCU_OUTPUT=$(ncu)

          # Use echo to write to GITHUB_STEP_SUMMARY
          echo "## 📦 Package Updates Available" >> $GITHUB_STEP_SUMMARY
          echo "The following packages can be updated:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$NCU_OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "To update all packages, run: npm run update" >> $GITHUB_STEP_SUMMARY

          # Capture JSON output for PR creation
          UPDATE_INFO=$(ncu --jsonUpgraded)
          echo "update_info<<EOF" >> $GITHUB_OUTPUT
          echo "$UPDATE_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check if there are updates
          if [ "$(echo "$UPDATE_INFO" | jq 'length')" -gt 0 ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for Dependabot PRs
        id: check-dependabot
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for open Dependabot PRs..."

          # Debug: List all open PRs to help diagnose issues
          echo "All open PRs:"
          gh pr list --json number,title,author --limit 10

          # Find all open Dependabot PRs using multiple detection strategies
          # 1. By author name AND
          # 2. By PR title prefix "Bump"
          DEPENDABOT_PRS=$(gh pr list --state open --json number,title,headRefName,author --jq '[.[] | select((.author.login == "dependabot[bot]" or .author.login == "dependabot") or (.title | startswith("Bump "))) | {number: .number, title: .title, branch: .headRefName}]')

          echo "Found Dependabot PRs:"
          echo "$DEPENDABOT_PRS" | jq '.'

          # Check if there are any Dependabot PRs
          if [ "$(echo "$DEPENDABOT_PRS" | jq 'length')" -gt 0 ]; then
            echo "✅ Found Dependabot PRs"
            echo "has_dependabot_prs=true" >> $GITHUB_OUTPUT
            echo "dependabot_prs<<EOF" >> $GITHUB_OUTPUT
            echo "$DEPENDABOT_PRS" >> $GITHUB_OUTPUT 
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ No Dependabot PRs found"
            echo "has_dependabot_prs=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PR
        id: check-pr
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_EXISTS=$(gh pr list --json number,title,headRefName --jq '.[] | select(.title == "chore: update npm dependencies" and (.headRefName | startswith("deps/update-packages"))) | .number')
          if [ -n "$PR_EXISTS" ]; then
            echo "Found existing PR #$PR_EXISTS"
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_EXISTS" >> $GITHUB_OUTPUT
            PR_BRANCH=$(gh pr view $PR_EXISTS --json headRefName --jq '.headRefName')
            echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found."
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "pr_branch=deps/update-packages" >> $GITHUB_OUTPUT
          fi

      - name: Checkout or create update branch
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        run: |
          # Try to checkout existing branch or create new one
          git fetch origin
          git checkout ${{ steps.check-pr.outputs.pr_branch }} 2>/dev/null || git checkout -b ${{ steps.check-pr.outputs.pr_branch }}

          # If the branch exists remotely, pull the latest changes
          if git ls-remote --exit-code --heads origin ${{ steps.check-pr.outputs.pr_branch }} &>/dev/null; then
            git pull origin ${{ steps.check-pr.outputs.pr_branch }} || true
          fi

      - name: Incorporate Dependabot PRs
        if: ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          DEPENDABOT_PRS: ${{ steps.check-dependabot.outputs.dependabot_prs }}
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Create a file to track successfully incorporated PRs
          echo "[]" > incorporated_prs.json

          # Debug: Show what we received
          echo "Received Dependabot PRs:"
          echo "$DEPENDABOT_PRS" | jq '.'

          # Parse the JSON array of dependabot PRs - ensure we're processing a JSON array
          echo "$DEPENDABOT_PRS" | jq -c '.[]' | while read -r PR_INFO; do
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_BRANCH=$(echo "$PR_INFO" | jq -r '.branch')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            
            echo "Processing Dependabot PR #$PR_NUMBER: $PR_TITLE (branch: $PR_BRANCH)"
            
            # Fetch the Dependabot branch
            git fetch origin "$PR_BRANCH" || { echo "Failed to fetch $PR_BRANCH, skipping"; continue; }
            
            # Try to merge the branch (skip if conflict)
            if git merge --no-commit --no-ff "origin/$PR_BRANCH"; then
              echo "Successfully merged Dependabot PR #$PR_NUMBER"
              git commit -m "chore: incorporate Dependabot PR #$PR_NUMBER ($PR_TITLE)"
              
              # Add to successfully incorporated PRs
              jq --arg num "$PR_NUMBER" --arg title "$PR_TITLE" '. += [{"number": $num, "title": $title}]' incorporated_prs.json > tmp.json && mv tmp.json incorporated_prs.json
            else
              echo "Merge conflict with Dependabot PR #$PR_NUMBER, skipping"
              git merge --abort
            fi
          done

          # Record which Dependabot PRs were incorporated
          echo "INCORPORATED_DEPENDABOT_PRS=$(cat incorporated_prs.json)" >> $GITHUB_ENV

          # Store the same info as output
          echo "incorporated_prs<<EOF" >> $GITHUB_OUTPUT
          cat incorporated_prs.json >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Incorporated PRs:"
          cat incorporated_prs.json | jq '.'

      - name: Update packages
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-updates.outputs.has_updates == 'true' }}
        run: |
          # Update packages and install
          ncu -u
          npm install

      - name: Commit package updates
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-updates.outputs.has_updates == 'true' }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json package-lock.json
          git diff --staged --quiet || git commit -m "chore: update npm dependencies"

      - name: Push changes to branch
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        run: |
          git push origin ${{ steps.check-pr.outputs.pr_branch }}

      - name: Add comment to existing PR about updates
        if: ${{ steps.check-pr.outputs.pr_exists == 'true' && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.check-pr.outputs.pr_number }}
          UPDATE_INFO: ${{ steps.check-updates.outputs.update_info }}
          DEPENDABOT_PRS: ${{ steps.check-dependabot.outputs.dependabot_prs }}
          INCORPORATED_PRS: ${{ steps.check-dependabot.outputs.incorporated_prs }}
        run: |
          # Start building comment
          COMMENT="## 📦 New dependency updates added\n\nThis PR has been updated with "
          UPDATES_ADDED=false

          # Check if there were any ncu updates
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ] && git diff HEAD~1 --name-only | grep -E 'package(-lock)?.json'; then
            COMMENT+="npm package updates"
            UPDATES_ADDED=true
            
            # Add ncu updates section
            COMMENT+="\n\n<details>\n<summary>Latest Package Updates</summary>\n\n\`\`\`json\n$UPDATE_INFO\n\`\`\`\n</details>"
          fi

          # Check if there were any Dependabot PRs incorporated
          if [ "${{ steps.check-dependabot.outputs.has_dependabot_prs }}" == "true" ]; then
            # Check if we actually incorporated any PRs
            INCORPORATED_COUNT=$(echo "$INCORPORATED_PRS" | jq -s 'length // 0')
            
            if [ "$INCORPORATED_COUNT" -gt 0 ]; then
              if [ "$UPDATES_ADDED" == "true" ]; then
                COMMENT+=" and "
              fi
              COMMENT+="Dependabot updates"
              
              # Add Dependabot updates section
              COMMENT+="\n\n<details>\n<summary>Incorporated Dependabot PRs</summary>\n\n"
              
              echo "$INCORPORATED_PRS" | jq -r '.[] | "- PR #\(.number): \(.title)"' | while read -r LINE; do
                COMMENT+="$LINE\n"
              done
              
              COMMENT+="\n</details>"
            fi
          fi

          # Only post comment if we have something meaningful to say
          if [ "$UPDATES_ADDED" == "true" ] || [ "$INCORPORATED_COUNT" -gt 0 ]; then
            # Create the comment
            gh pr comment $PR_NUMBER --body "$COMMENT"
          else
            echo "No updates to comment about"
          fi

      - name: Create new Pull Request
        if: ${{ steps.check-pr.outputs.pr_exists != 'true' && (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          INCORPORATED_PRS: ${{ steps.check-dependabot.outputs.incorporated_prs }}
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          commit-message: "chore: update npm dependencies"
          title: "chore: update npm dependencies"
          body: |
            This PR updates dependencies to their latest versions.

            ${{ github.event_name == 'workflow_dispatch' && 'Updated manually via GitHub Actions workflow dispatch.' || 'Updated automatically via GitHub Actions after detecting available updates.' }}

            ${{ steps.check-updates.outputs.has_updates == 'true' && '### NPM Package Updates' || '' }}
            ${{ steps.check-updates.outputs.has_updates == 'true' && '<details><summary>Show Updates</summary>' || '' }}
            ${{ steps.check-updates.outputs.has_updates == 'true' && '```json' || '' }}
            ${{ steps.check-updates.outputs.has_updates == 'true' && steps.check-updates.outputs.update_info || '' }}
            ${{ steps.check-updates.outputs.has_updates == 'true' && '```' || '' }}
            ${{ steps.check-updates.outputs.has_updates == 'true' && '</details>' || '' }}

            ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' && '### Incorporated Dependabot PRs' || '' }}
            ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' && '<details><summary>Show PRs</summary>' || '' }}
            ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' && 'The following Dependabot PRs were incorporated:' || '' }}

            ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' && '```json' || '' }}
            ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' && steps.check-dependabot.outputs.incorporated_prs || '' }}
            ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' && '```' || '' }}
            ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' && '</details>' || '' }}
          branch: ${{ steps.check-pr.outputs.pr_branch }}
          delete-branch: true
          base: master
