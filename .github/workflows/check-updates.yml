name: Check for Package Updates
on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      update-packages:
        description: "Automatically update package.json (creates PR)"
        required: false
        type: boolean
        default: true
  schedule:
    - cron: "0 0 * * 1"

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install npm-check-updates and tools
        run: |
          npm install -g npm-check-updates
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check for package updates
        id: check-updates
        run: |
          # Capture ncu output
          NCU_OUTPUT=$(ncu)

          # Use echo to write to GITHUB_STEP_SUMMARY
          echo "## 📦 Package Updates Available" >> $GITHUB_STEP_SUMMARY
          echo "The following packages can be updated:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$NCU_OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "To update all packages, run: npm run update" >> $GITHUB_STEP_SUMMARY

          # Capture JSON output for PR creation
          UPDATE_INFO=$(ncu --jsonUpgraded)
          echo "update_info<<EOF" >> $GITHUB_OUTPUT
          echo "$UPDATE_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check if there are updates
          if [ "$(echo "$UPDATE_INFO" | jq 'length')" -gt 0 ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for Dependabot PRs
        id: check-dependabot
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for open Dependabot PRs..."

          # Debug: List all open PRs to help diagnose issues
          echo "All open PRs:"
          gh pr list --json number,title,author --limit 10

          # Find all open Dependabot PRs using multiple detection strategies
          # 1. By author name AND
          # 2. By PR title prefix "Bump"
          DEPENDABOT_PRS=$(gh pr list --state open --json number,title,headRefName,author --jq '[.[] | select((.author.login == "dependabot[bot]" or .author.login == "dependabot") or (.title | startswith("Bump "))) | {number: .number, title: .title, branch: .headRefName}]')

          echo "Found Dependabot PRs:"
          echo "$DEPENDABOT_PRS" | jq '.'

          # Check if there are any Dependabot PRs
          if [ "$(echo "$DEPENDABOT_PRS" | jq 'length')" -gt 0 ]; then
            echo "✅ Found Dependabot PRs"
            echo "has_dependabot_prs=true" >> $GITHUB_OUTPUT
            echo "dependabot_prs<<EOF" >> $GITHUB_OUTPUT
            echo "$DEPENDABOT_PRS" >> $GITHUB_OUTPUT 
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "❌ No Dependabot PRs found"
            echo "has_dependabot_prs=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PR
        id: check-pr
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_EXISTS=$(gh pr list --json number,title,headRefName --jq '.[] | select(.title == "chore: update npm dependencies" and (.headRefName | startswith("deps/update-packages"))) | .number')
          if [ -n "$PR_EXISTS" ]; then
            echo "Found existing PR #$PR_EXISTS"
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_EXISTS" >> $GITHUB_OUTPUT
            PR_BRANCH=$(gh pr view $PR_EXISTS --json headRefName --jq '.headRefName')
            echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found."
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "pr_branch=deps/update-packages" >> $GITHUB_OUTPUT
          fi

      - name: Checkout or create update branch
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        run: |
          # Try to checkout existing branch or create new one
          git fetch origin
          git checkout ${{ steps.check-pr.outputs.pr_branch }} 2>/dev/null || git checkout -b ${{ steps.check-pr.outputs.pr_branch }}

          # If the branch exists remotely, pull the latest changes
          if git ls-remote --exit-code --heads origin ${{ steps.check-pr.outputs.pr_branch }} &>/dev/null; then
            git pull origin ${{ steps.check-pr.outputs.pr_branch }} || true
          fi

      - name: Incorporate Dependabot PRs
        id: check-dependabot-incorporate
        if: ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          DEPENDABOT_PRS: ${{ steps.check-dependabot.outputs.dependabot_prs }}
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Create a file to track successfully incorporated PRs (in /tmp, not in the repo)
          TEMP_PR_FILE="/tmp/incorporated_prs.json"
          echo "[]" > $TEMP_PR_FILE

          # Flag to track if any package.json changes were made
          PACKAGE_JSON_CHANGED=false

          # Debug: Show what we received
          echo "Received Dependabot PRs:"
          echo "$DEPENDABOT_PRS" | jq '.'

          # Keep track of successfully incorporated PRs
          INCORPORATED_COUNT=0

          # Check commit history to determine if PRs were already incorporated
          echo "Checking if any PRs were already incorporated..."
          ALREADY_INCORPORATED=()

          # Get the commit log for the current branch
          COMMIT_LOG=$(git log --grep="incorporate Dependabot PR" --oneline)
          echo "Commit log for Dependabot incorporations:"
          echo "$COMMIT_LOG"

          if [[ -n "$COMMIT_LOG" ]]; then
            # Parse the JSON array of dependabot PRs to check for already incorporated PRs
            echo "$DEPENDABOT_PRS" | jq -c '.[]' | while read -r PR_INFO; do
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
              if git log --grep="incorporate Dependabot PR #$PR_NUMBER" --oneline | grep -q .; then
                echo "PR #$PR_NUMBER is already incorporated, skipping"
                ALREADY_INCORPORATED+=($PR_NUMBER)
                
                # Add to successfully incorporated PRs in the temporary file
                jq --arg num "$PR_NUMBER" --arg title "$(echo "$PR_INFO" | jq -r '.title')" \
                  '. += [{"number": $num, "title": $title, "already_incorporated": true}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
                
                # Increment counter for tracking
                INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
              fi
            done
          fi

          # Parse the JSON array of dependabot PRs - ensure we're processing a JSON array
          echo "$DEPENDABOT_PRS" | jq -c '.[]' | while read -r PR_INFO; do
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_BRANCH=$(echo "$PR_INFO" | jq -r '.branch')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            
            # Skip if already incorporated
            if [[ " ${ALREADY_INCORPORATED[@]} " =~ " ${PR_NUMBER} " ]]; then
              echo "Skipping PR #$PR_NUMBER as it was already incorporated"
              continue
            fi
            
            echo "Processing Dependabot PR #$PR_NUMBER: $PR_TITLE (branch: $PR_BRANCH)"
            
            # Check if this is a package update PR (contains "npm_and_yarn" in branch name)
            IS_PACKAGE_UPDATE=$(echo "$PR_BRANCH" | grep -q "npm_and_yarn" && echo "true" || echo "false")
            
            # Fetch the Dependabot branch
            git fetch origin "$PR_BRANCH" || { echo "Failed to fetch $PR_BRANCH, skipping"; continue; }
            
            # Before merge - take a snapshot of package.json if this is a package update
            if [ "$IS_PACKAGE_UPDATE" = "true" ]; then
              echo "This is a package.json update PR"
              BEFORE_PACKAGE_CONTENT=""
              if [ -f package.json ]; then
                BEFORE_PACKAGE_CONTENT=$(cat package.json)
              fi
            fi
            
            # Try to merge the branch (skip if conflict)
            if git merge --no-commit --no-ff "origin/$PR_BRANCH"; then
              git_status_output=$(git status --porcelain)
              
              # Only proceed if there are changes to commit
              if [ -n "$git_status_output" ]; then
                echo "Found changes to commit from PR #$PR_NUMBER"
                echo "Successfully merged changes from PR #$PR_NUMBER"
                
                # For package updates, verify changes were made
                if [ "$IS_PACKAGE_UPDATE" = "true" ]; then
                  if [ -f package.json ]; then
                    AFTER_PACKAGE_CONTENT=$(cat package.json)
                    if [ "$BEFORE_PACKAGE_CONTENT" != "$AFTER_PACKAGE_CONTENT" ]; then
                      echo "✅ package.json was updated by merge"
                      PACKAGE_JSON_CHANGED=true
                    else
                      echo "⚠️ Warning: package.json content didn't change after merge"
                    fi
                  fi
                fi
                
                # Make sure the package-lock is updated if package.json changed
                if [ "$IS_PACKAGE_UPDATE" = "true" ] && [ -f package.json ] && [ -f package-lock.json ]; then
                  echo "Running npm install to update package-lock.json"
                  npm install --package-lock-only || true
                fi
                
                # Commit the changes
                git add --all
                git commit -m "chore: incorporate Dependabot PR #$PR_NUMBER ($PR_TITLE)"
                
                # Increment counter
                INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
                
                # Add to successfully incorporated PRs in the temporary file
                jq --arg num "$PR_NUMBER" --arg title "$PR_TITLE" '. += [{"number": $num, "title": $title, "already_incorporated": false}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
              else
                echo "No changes to commit for PR #$PR_NUMBER, skipping commit"
                git merge --abort || true
              fi
            else
              echo "Merge conflict with Dependabot PR #$PR_NUMBER, skipping"
              git merge --abort
              
              # For package updates with conflicts, try a more direct approach
              if [ "$IS_PACKAGE_UPDATE" = "true" ]; then
                echo "Attempting direct update for package using Dependabot changes..."
                
                # Create a temporary branch for the Dependabot changes
                git checkout -b temp-dependabot-$PR_NUMBER "origin/$PR_BRANCH"
                
                # Get the specific package and version
                if [ -f package.json ]; then
                  # Find package name and new version from PR title
                  if [[ "$PR_TITLE" =~ Bump[[:space:]]([^[:space:]]+)[[:space:]]from[[:space:]]([^[:space:]]+)[[:space:]]to[[:space:]]([^[:space:]]+) ]]; then
                    PACKAGE_NAME="${BASH_REMATCH[1]}"
                    OLD_VERSION="${BASH_REMATCH[2]}"
                    NEW_VERSION="${BASH_REMATCH[3]}"
                    
                    echo "Found package info: $PACKAGE_NAME from $OLD_VERSION to $NEW_VERSION"
                    
                    # Go back to our main branch
                    git checkout ${{ steps.check-pr.outputs.pr_branch }}
                    
                    # Try to update with npm directly
                    npm install $PACKAGE_NAME@$NEW_VERSION || true
                    
                    # Commit if we have changes
                    if git diff --quiet package.json package-lock.json; then
                      echo "No changes made to package files"
                    else
                      echo "✅ Successfully updated $PACKAGE_NAME to $NEW_VERSION directly"
                      PACKAGE_JSON_CHANGED=true
                      git add package.json package-lock.json
                      git commit -m "chore: incorporate Dependabot PR #$PR_NUMBER (update $PACKAGE_NAME to $NEW_VERSION)"
                      
                      # Increment counter
                      INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
                      
                      # Add to successfully incorporated PRs in the temporary file
                      jq --arg num "$PR_NUMBER" --arg title "$PR_TITLE" '. += [{"number": $num, "title": $title, "already_incorporated": false}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
                    fi
                  else
                    echo "Could not parse package information from PR title"
                  fi
                fi
                
                # Cleanup the temporary branch
                git branch -D temp-dependabot-$PR_NUMBER || true
              fi
            fi
          done

          # Debug: Show git status
          echo "Git status after incorporating Dependabot PRs:"
          git status

          # Set a flag indicating if package.json was changed
          echo "package_json_changed=$PACKAGE_JSON_CHANGED" >> $GITHUB_OUTPUT

          # Store the incorporated count - including ones already incorporated from previous runs
          echo "incorporated_count=$INCORPORATED_COUNT" >> $GITHUB_OUTPUT

          # Store the incorporated PRs as output only
          echo "incorporated_prs<<EOF" >> $GITHUB_OUTPUT
          cat "$TEMP_PR_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "Incorporated PRs ($INCORPORATED_COUNT):"
          cat "$TEMP_PR_FILE" | jq '.'

          # List all changes in the working directory, if any new changes were made
          NEWLY_INCORPORATED=$(cat "$TEMP_PR_FILE" | jq '[.[] | select(.already_incorporated == false)] | length')
          if [ "$NEWLY_INCORPORATED" -gt 0 ]; then
            echo "Files changed in our branch from newly incorporated PRs:"
            git diff --name-only HEAD~$NEWLY_INCORPORATED HEAD || true
          else
            echo "No new PRs were incorporated in this run, no new file changes to show."
          fi

          # Don't fail the job if there were no new incorporations but PRs exist in history
          exit 0

      - name: Update packages with npm-check-updates
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-updates.outputs.has_updates == 'true' }}
        run: |
          # Update packages and install
          ncu -u
          npm install

      - name: Commit package updates
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-updates.outputs.has_updates == 'true' }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json package-lock.json
          git diff --staged --quiet || git commit -m "chore: update npm dependencies"

      - name: Push changes to branch
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        run: |
          git push origin ${{ steps.check-pr.outputs.pr_branch }}

      - name: Create custom PR body
        id: pr-body
        if: ${{ steps.check-pr.outputs.pr_exists != 'true' && (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || (steps.check-dependabot.outputs.has_dependabot_prs == 'true' && steps.check-dependabot-incorporate.outputs.incorporated_count > 0)) }}
        env:
          INCORPORATED_PRS: ${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}
        run: |
          # Create PR body with proper formatting
          PR_BODY="This PR updates dependencies to their latest versions.

          $([ "${{ github.event_name }}" == "workflow_dispatch" ] && echo "Updated manually via GitHub Actions workflow dispatch." || echo "Updated automatically via GitHub Actions after detecting available updates.")
          "

          # Add npm updates section if there are any
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ]; then
            PR_BODY="${PR_BODY}

          ### NPM Package Updates
          <details><summary>Show Updates</summary>

          \`\`\`json
          ${{ steps.check-updates.outputs.update_info }}
          \`\`\`
          </details>
          "
          fi

          # Add dependabot updates section if there are any
          if [ "${{ steps.check-dependabot-incorporate.outputs.incorporated_count }}" -gt 0 ]; then
            # Create a list of incorporated PRs in a user-friendly format
            PR_LIST=""
            while read -r PR_ITEM; do
              PR_NUM=$(echo "$PR_ITEM" | jq -r '.number')
              PR_TITLE=$(echo "$PR_ITEM" | jq -r '.title')
              PR_LIST="${PR_LIST}- PR #${PR_NUM}: ${PR_TITLE}\n"
            done < <(echo "$INCORPORATED_PRS" | jq -c '.[]')

            PR_BODY="${PR_BODY}

          ### Incorporated Dependabot PRs
          <details><summary>Show Incorporated PRs</summary>
          The following Dependabot PRs were incorporated:

          ${PR_LIST}
          </details>
          "
            
            # Log the incorporated PRs for debugging
            echo "Including Dependabot PRs in the initial PR body:"
            echo "$INCORPORATED_PRS" | jq -r '.[] | "  - PR #\(.number): \(.title)"'
          fi

          # Escape newlines for GitHub Actions output
          PR_BODY="${PR_BODY//$'\n'/%0A}"
          echo "body=$PR_BODY" >> $GITHUB_OUTPUT

      - name: Create new Pull Request with gh CLI
        if: ${{ steps.check-pr.outputs.pr_exists != 'true' && (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || (steps.check-dependabot.outputs.has_dependabot_prs == 'true' && steps.check-dependabot-incorporate.outputs.incorporated_count > 0)) }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          PR_BRANCH: ${{ steps.check-pr.outputs.pr_branch }}
          PR_BODY: ${{ steps.pr-body.outputs.body }}
        run: |
          # Verify we have changes in the branch
          if git diff --quiet origin/master origin/$PR_BRANCH; then
            echo "No differences found between branches, skipping PR creation"
          else
            echo "Found differences between branches, creating PR"
            gh pr create \
              --title "chore: update npm dependencies" \
              --body "${PR_BODY//%0A/$'\n'}" \
              --base master \
              --head $PR_BRANCH
          fi

      - name: Add comment to existing PR about updates
        if: ${{ steps.check-pr.outputs.pr_exists == 'true' && (steps.check-updates.outputs.has_updates == 'true' || (steps.check-dependabot.outputs.has_dependabot_prs == 'true' && steps.check-dependabot-incorporate.outputs.incorporated_count > 0)) }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.check-pr.outputs.pr_number }}
          UPDATE_INFO: ${{ steps.check-updates.outputs.update_info }}
          INCORPORATED_PRS: ${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}
        # Using pipe character for YAML block scalar - ensures proper parsing
        run: |
          # Skip comment creation when there are no new updates

          # First check if there are any new npm updates
          NPM_UPDATED=false
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ] && git diff HEAD~1 --name-only | grep -E 'package(-lock)?.json'; then
            NPM_UPDATED=true
          fi

          # Check if there are any newly incorporated Dependabot PRs (not already incorporated in previous runs)
          NEWLY_INCORPORATED=$(echo "$INCORPORATED_PRS" | jq '[.[] | select(.already_incorporated == false)] | length')

          echo "Status check:"
          echo "- NPM Updates: $NPM_UPDATED"
          echo "- Newly Incorporated Dependabot PRs: $NEWLY_INCORPORATED"

          # Only proceed if we have actual updates to comment about
          if [ "$NPM_UPDATED" != "true" ] && [ "$NEWLY_INCORPORATED" -eq 0 ]; then
            echo "No new updates to comment about - skipping comment creation"
            exit 0
          fi

          echo "Found new updates to comment about - preparing comment"

          # Use a temporary file for comment construction
          COMMENT_FILE=$(mktemp)

          # Write header
          echo "## 📦 New dependency updates added" > "$COMMENT_FILE"
          echo "" >> "$COMMENT_FILE"
          echo -n "This PR has been updated with " >> "$COMMENT_FILE"

          # Track what's included in the update
          UPDATES_ADDED=false
          DEPENDABOT_ADDED=false

          # Add npm updates section
          if [ "$NPM_UPDATED" == "true" ]; then
            echo -n "npm package updates" >> "$COMMENT_FILE"
            UPDATES_ADDED=true
            
            # Add update details in a collapsible section
            {
              echo ""
              echo ""
              echo "<details>"
              echo "<summary>Latest Package Updates</summary>"
              echo ""
              echo "```json"
              echo "$UPDATE_INFO"
              echo "```"
              echo "</details>"
            } >> "$COMMENT_FILE"
          fi

          # Add Dependabot PR updates section
          if [ "$NEWLY_INCORPORATED" -gt 0 ]; then
            # Add conjunction if needed
            if [ "$UPDATES_ADDED" == "true" ]; then
              echo -n " and " >> "$COMMENT_FILE"
            fi
            
            echo -n "Dependabot updates" >> "$COMMENT_FILE"
            DEPENDABOT_ADDED=true
            
            # Build list of PRs
            PR_LIST=""
            echo "$INCORPORATED_PRS" | jq -c '.[] | select(.already_incorporated == false)' | while read -r PR_ITEM; do
              PR_NUM=$(echo "$PR_ITEM" | jq -r '.number')
              PR_TITLE=$(echo "$PR_ITEM" | jq -r '.title')
              echo "- PR #${PR_NUM}: ${PR_TITLE}" >> "$COMMENT_FILE.list"
            done
            
            # Add PR details in a collapsible section
            {
              echo ""
              echo ""
              echo "<details>"
              echo "<summary>Newly Incorporated Dependabot PRs</summary>"
              echo ""
              cat "$COMMENT_FILE.list"
              echo "</details>"
            } >> "$COMMENT_FILE"
            
            rm -f "$COMMENT_FILE.list"
          fi

          # Log what we're doing
          echo "Posting comment to PR #$PR_NUMBER with updates:"
          if [ "$UPDATES_ADDED" == "true" ]; then
            echo "- NPM Package Updates"
          fi
          if [ "$DEPENDABOT_ADDED" == "true" ]; then
            echo "- New Dependabot PRs: $NEWLY_INCORPORATED"
            echo "$INCORPORATED_PRS" | jq -c '.[] | select(.already_incorporated == false)' | jq -r '"  - PR #\(.number): \(.title)"'
          fi

          # Show preview
          echo "Comment to be posted (preview):"
          cat "$COMMENT_FILE" | head -15
          echo "... (more content) ..."

          # Submit the comment
          gh pr comment "$PR_NUMBER" --body-file "$COMMENT_FILE"

          # Clean up
          rm -f "$COMMENT_FILE"
