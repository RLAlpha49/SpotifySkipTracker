name: Check for Package Updates
on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      update-packages:
        description: "Automatically update package.json (creates PR)"
        required: false
        type: boolean
        default: true
  schedule:
    - cron: "0 0 * * *"

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install npm-check-updates and tools
        run: |
          npm install -g npm-check-updates
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check for Dependabot PRs
        id: check-dependabot
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "[INFO] Scanning for open Dependabot PRs"
          # Find all open Dependabot PRs using multiple detection strategies
          # 1. By author name AND
          # 2. By PR title prefix "Bump"
          DEPENDABOT_PRS=$(gh pr list --state open --json number,title,headRefName,author --jq '[.[] | select((.author.login == "dependabot[bot]" or .author.login == "dependabot") or (.title | startswith("Bump "))) | {number: .number, title: .title, branch: .headRefName}]')

          DEPENDABOT_COUNT=$(echo "$DEPENDABOT_PRS" | jq 'length')
          echo "[INFO] Found $DEPENDABOT_COUNT Dependabot PR(s)"

          if [ "$DEPENDABOT_COUNT" -gt 0 ]; then
            echo "[SUCCESS] Dependabot PRs detected"
            echo "has_dependabot_prs=true" >> $GITHUB_OUTPUT
            echo "dependabot_prs<<EOF" >> $GITHUB_OUTPUT
            echo "$DEPENDABOT_PRS" >> $GITHUB_OUTPUT 
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "[INFO] No Dependabot PRs found"
            echo "has_dependabot_prs=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PR
        id: check-pr
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-dependabot.outputs.has_dependabot_prs == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_EXISTS=$(gh pr list --json number,title,headRefName --jq '.[] | select(.title == "chore: update npm dependencies" and (.headRefName | startswith("deps/update-packages"))) | .number')
          if [ -n "$PR_EXISTS" ]; then
            echo "[INFO] Existing dependency update PR found: #$PR_EXISTS"
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_EXISTS" >> $GITHUB_OUTPUT
            PR_BRANCH=$(gh pr view $PR_EXISTS --json headRefName --jq '.headRefName')
            echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "[INFO] No existing dependency update PR found - will create new PR"
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "pr_branch=deps/update-packages" >> $GITHUB_OUTPUT
          fi

      - name: Checkout or create update branch
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-dependabot.outputs.has_dependabot_prs == 'true' }}
        run: |
          echo "[INFO] Setting up branch: ${{ steps.check-pr.outputs.pr_branch }}"
          LOCAL_BRANCH_EXISTS=false
          REMOTE_BRANCH_EXISTS=false

          if git show-ref --verify --quiet refs/heads/${{ steps.check-pr.outputs.pr_branch }}; then
            LOCAL_BRANCH_EXISTS=true
          fi

          if git ls-remote --exit-code --heads origin ${{ steps.check-pr.outputs.pr_branch }} &>/dev/null; then
            REMOTE_BRANCH_EXISTS=true
          fi

          git fetch origin --prune

          if [ "$LOCAL_BRANCH_EXISTS" = "true" ]; then
            echo "[INFO] Checking out existing local branch"
            git checkout ${{ steps.check-pr.outputs.pr_branch }}
          elif [ "$REMOTE_BRANCH_EXISTS" = "true" ]; then
            echo "[INFO] Checking out existing remote branch"
            git checkout -b ${{ steps.check-pr.outputs.pr_branch }} origin/${{ steps.check-pr.outputs.pr_branch }}
          else
            echo "[INFO] Creating new branch"
            git checkout -b ${{ steps.check-pr.outputs.pr_branch }}
          fi

          if [ "$REMOTE_BRANCH_EXISTS" = "true" ]; then
            git pull origin ${{ steps.check-pr.outputs.pr_branch }} || true
          fi

      - name: Incorporate Dependabot PRs
        id: check-dependabot-incorporate
        if: ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          DEPENDABOT_PRS: ${{ steps.check-dependabot.outputs.dependabot_prs }}
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Create a file to track successfully incorporated PRs
          TEMP_PR_FILE="/tmp/incorporated_prs.json"
          echo "[]" > $TEMP_PR_FILE
          PACKAGE_JSON_CHANGED=false
          INCORPORATED_COUNT=0

          echo "[INFO] Processing Dependabot PRs"

          # Check commit history to identify already incorporated PRs
          ALREADY_INCORPORATED=()
          COMMIT_LOG=$(git log --grep="incorporate Dependabot PR" --oneline)

          if [[ -n "$COMMIT_LOG" ]]; then
            echo "$DEPENDABOT_PRS" | jq -c '.[]' | while read -r PR_INFO; do
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
              if git log --grep="incorporate Dependabot PR #$PR_NUMBER" --oneline | grep -q .; then
                echo "[INFO] PR #$PR_NUMBER is already incorporated, skipping"
                ALREADY_INCORPORATED+=($PR_NUMBER)
                
                # Add to incorporated PRs tracking
                jq --arg num "$PR_NUMBER" --arg title "$(echo "$PR_INFO" | jq -r '.title')" \
                  '. += [{"number": $num, "title": $title, "already_incorporated": true}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
                
                INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
              fi
            done
          fi

          # Process each Dependabot PR
          echo "$DEPENDABOT_PRS" | jq -c '.[]' | while read -r PR_INFO; do
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_BRANCH=$(echo "$PR_INFO" | jq -r '.branch')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            
            # Skip if already incorporated
            if [[ " ${ALREADY_INCORPORATED[@]} " =~ " ${PR_NUMBER} " ]]; then
              continue
            fi
            
            echo "[INFO] Incorporating PR #$PR_NUMBER: $PR_TITLE"
            
            # Check if this is a package update PR
            IS_PACKAGE_UPDATE=$(echo "$PR_BRANCH" | grep -q "npm_and_yarn" && echo "true" || echo "false")
            
            # Fetch the Dependabot branch
            git fetch origin "$PR_BRANCH" || { echo "[ERROR] Failed to fetch $PR_BRANCH, skipping"; continue; }
            
            # For package updates, take snapshot of package.json
            if [ "$IS_PACKAGE_UPDATE" = "true" ] && [ -f package.json ]; then
              BEFORE_PACKAGE_CONTENT=$(cat package.json)
            fi
            
            # Try to merge the branch
            if git merge --no-commit --no-ff "origin/$PR_BRANCH"; then
              git_status_output=$(git status --porcelain)
              
              if [ -n "$git_status_output" ]; then
                echo "[SUCCESS] Merged changes from PR #$PR_NUMBER"
                
                # For package updates, verify changes were made
                if [ "$IS_PACKAGE_UPDATE" = "true" ] && [ -f package.json ]; then
                  AFTER_PACKAGE_CONTENT=$(cat package.json)
                  if [ "$BEFORE_PACKAGE_CONTENT" != "$AFTER_PACKAGE_CONTENT" ]; then
                    echo "[SUCCESS] package.json was updated by merge"
                    PACKAGE_JSON_CHANGED=true
                  else
                    echo "[WARNING] package.json content didn't change after merge"
                  fi
                fi
                
                # Update package-lock if needed
                if [ "$IS_PACKAGE_UPDATE" = "true" ] && [ -f package.json ] && [ -f package-lock.json ]; then
                  npm install --package-lock-only || true
                fi
                
                # Commit the changes
                git add --all
                git commit -m "chore: incorporate Dependabot PR #$PR_NUMBER ($PR_TITLE)"
                
                INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
                
                # Track this PR incorporation
                jq --arg num "$PR_NUMBER" --arg title "$PR_TITLE" '. += [{"number": $num, "title": $title, "already_incorporated": false}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
              else
                echo "[INFO] No changes to commit for PR #$PR_NUMBER"
                git merge --abort || true
              fi
            else
              echo "[WARNING] Merge conflict with PR #$PR_NUMBER, attempting alternate approach"
              git merge --abort
              
              # For package updates with conflicts, try direct approach
              if [ "$IS_PACKAGE_UPDATE" = "true" ]; then
                git checkout -b temp-dependabot-$PR_NUMBER "origin/$PR_BRANCH"
                
                if [ -f package.json ]; then
                  # Parse package details from PR title
                  if [[ "$PR_TITLE" =~ Bump[[:space:]]([^[:space:]]+)[[:space:]]from[[:space:]]([^[:space:]]+)[[:space:]]to[[:space:]]([^[:space:]]+) ]]; then
                    PACKAGE_NAME="${BASH_REMATCH[1]}"
                    OLD_VERSION="${BASH_REMATCH[2]}"
                    NEW_VERSION="${BASH_REMATCH[3]}"
                    
                    echo "[INFO] Attempting direct update: $PACKAGE_NAME to $NEW_VERSION"
                    
                    # Return to update branch
                    git checkout ${{ steps.check-pr.outputs.pr_branch }}
                    
                    # Update package directly
                    npm install $PACKAGE_NAME@$NEW_VERSION || true
                    
                    # Commit if changed
                    if git diff --quiet package.json package-lock.json; then
                      echo "[INFO] No changes detected in package files"
                    else
                      echo "[SUCCESS] Updated $PACKAGE_NAME to $NEW_VERSION"
                      PACKAGE_JSON_CHANGED=true
                      git add package.json package-lock.json
                      git commit -m "chore: incorporate Dependabot PR #$PR_NUMBER (update $PACKAGE_NAME to $NEW_VERSION)"
                      
                      INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
                      
                      # Track this PR incorporation
                      jq --arg num "$PR_NUMBER" --arg title "$PR_TITLE" '. += [{"number": $num, "title": $title, "already_incorporated": false}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
                    fi
                  fi
                fi
                
                # Clean up temporary branch
                git branch -D temp-dependabot-$PR_NUMBER || true
              fi
            fi
          done

          # Set outputs for next steps
          echo "package_json_changed=$PACKAGE_JSON_CHANGED" >> $GITHUB_OUTPUT
          echo "incorporated_count=$INCORPORATED_COUNT" >> $GITHUB_OUTPUT
          echo "incorporated_prs<<EOF" >> $GITHUB_OUTPUT
          cat "$TEMP_PR_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Report summary of incorporated PRs
          NEWLY_INCORPORATED=$(cat "$TEMP_PR_FILE" | jq '[.[] | select(.already_incorporated == false)] | length')
          echo "[INFO] Dependabot incorporation complete: $NEWLY_INCORPORATED new, $((INCORPORATED_COUNT - NEWLY_INCORPORATED)) previously incorporated"

      - name: Check for package updates
        id: check-updates
        run: |
          # Capture ncu output for updates
          NCU_OUTPUT=$(ncu)

          # Add to step summary
          echo "## 📦 Package Updates Available" >> $GITHUB_STEP_SUMMARY
          echo "The following packages can be updated:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$NCU_OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "To update all packages, run: npm run update" >> $GITHUB_STEP_SUMMARY

          # Capture update info in structured format
          UPDATE_INFO=$(ncu --jsonUpgraded)
          echo "update_info<<EOF" >> $GITHUB_OUTPUT
          echo "$UPDATE_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check if there are updates
          UPDATE_COUNT=$(echo "$UPDATE_INFO" | jq 'length')
          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "[INFO] Found $UPDATE_COUNT package updates available"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "[INFO] No package updates found"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Update packages with npm-check-updates
        id: update-packages
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true) || (github.event_name != 'workflow_dispatch' && steps.check-updates.outputs.has_updates == 'true') }}
        run: |
          # Capture package.json before updates
          cp package.json /tmp/package.json.before

          # Update packages
          echo "[INFO] Updating packages to latest versions"
          ncu -u

          # Capture actual changes made
          if [ -f /tmp/package.json.before ] && [ -f package.json ]; then
            PACKAGE_DIFF=$(diff -u /tmp/package.json.before package.json | grep -E '^\+.*".*":.*".*"' | grep -v "+++" | sed 's/^+//g' | sed 's/,//g' | sed 's/^ *//g')
            
            if [ -n "$PACKAGE_DIFF" ]; then
              echo "[INFO] Package updates detected"
              echo "actual_changes<<EOF" >> $GITHUB_OUTPUT
              echo "$PACKAGE_DIFF" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "has_actual_changes=true" >> $GITHUB_OUTPUT
            else
              echo "[INFO] No actual changes detected in package.json"
              echo "has_actual_changes=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "[WARNING] Could not compare package.json changes"
            echo "has_actual_changes=false" >> $GITHUB_OUTPUT
          fi

          # Install updated packages
          echo "[INFO] Installing updated packages"
          npm install

      - name: Commit package updates
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-updates.outputs.has_updates == 'true' }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json package-lock.json
          git diff --staged --quiet || git commit -m "chore: update npm dependencies"

      - name: Push changes to branch
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        run: |
          PR_BRANCH="${{ steps.check-pr.outputs.pr_branch }}"
          BRANCH_EXISTS_REMOTELY=false

          if git ls-remote --exit-code --heads origin $PR_BRANCH &>/dev/null; then
            BRANCH_EXISTS_REMOTELY=true
          fi

          # Check for unpushed changes
          UNPUSHED_COUNT=$(git rev-list --count origin/$PR_BRANCH..HEAD 2>/dev/null || echo "0")

          if [ "$UNPUSHED_COUNT" -gt 0 ]; then
            echo "[INFO] Pushing $UNPUSHED_COUNT new commits to branch"
            git push origin $PR_BRANCH
          elif [ "$BRANCH_EXISTS_REMOTELY" = "false" ]; then
            echo "[INFO] Pushing branch to remote for first time"
            git push origin $PR_BRANCH
          else
            echo "[INFO] No new commits to push"
          fi

          # Verify branch exists remotely
          if git ls-remote --exit-code --heads origin $PR_BRANCH &>/dev/null; then
            echo "[SUCCESS] Branch $PR_BRANCH exists remotely"
          else
            echo "[ERROR] Failed to push branch $PR_BRANCH to remote"
            exit 1
          fi

      - name: Create custom PR body
        id: pr-body
        if: ${{ steps.check-pr.outputs.pr_exists != 'true' && (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          INCORPORATED_PRS: ${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}
          UPDATE_INFO: ${{ steps.check-updates.outputs.update_info }}
          ACTUAL_CHANGES: ${{ steps.update-packages.outputs.actual_changes }}
          HAS_ACTUAL_CHANGES: ${{ steps.update-packages.outputs.has_actual_changes }}
        run: |
          echo "[INFO] Preparing PR body"

          # Create PR body with proper formatting
          PR_BODY="This PR updates dependencies to their latest versions.

          $([ "${{ github.event_name }}" == "workflow_dispatch" ] && echo "Updated manually via GitHub Actions workflow dispatch." || echo "Updated automatically via GitHub Actions after detecting available updates.")
          "

          # Add npm updates section if there are any
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ]; then
            # Check if we have actual changes from the diff
            if [ "$HAS_ACTUAL_CHANGES" == "true" ] && [ -n "$ACTUAL_CHANGES" ]; then
              # Generate a formatted JSON-like output
              FORMATTED_CHANGES="{"
              while IFS= read -r line; do
                if [[ -n "$line" ]]; then
                  FORMATTED_CHANGES+=$'\n  '"$line"
                fi
              done <<< "$ACTUAL_CHANGES"
              FORMATTED_CHANGES+=$'\n}'
              
              PR_BODY="${PR_BODY}

          ### NPM Package Updates
          <details><summary>Show Updates</summary>

          \`\`\`json
          ${FORMATTED_CHANGES}
          \`\`\`
          </details>
          "
            else
              # Try git diff if actual changes weren't captured
              PACKAGE_CHANGES=$(git diff --staged package.json || git diff HEAD~1 package.json || git diff HEAD package.json)
              DEPENDENCY_CHANGES=$(echo "$PACKAGE_CHANGES" | grep -E '^\+.*".*":.*".*"' | sed 's/^+//g' | sed 's/,//g' | sed 's/"//g' | sed 's/^ *//g')
              
              if [[ -n "$DEPENDENCY_CHANGES" ]]; then
                # Format for PR body
                FORMATTED_CHANGES="{"
                while IFS= read -r line; do
                  if [[ -n "$line" ]]; then
                    FORMATTED_CHANGES+=$'\n  '"$line"
                  fi
                done <<< "$DEPENDENCY_CHANGES"
                FORMATTED_CHANGES+=$'\n}'
                
                PR_BODY="${PR_BODY}

          ### NPM Package Updates
          <details><summary>Show Updates</summary>

          \`\`\`json
          ${FORMATTED_CHANGES}
          \`\`\`
          </details>
          "
              else
                # Fallback to ncu output
                FORMATTED_JSON=$(echo "$UPDATE_INFO" | jq -r 'if type == "object" then . else . end')
                PR_BODY="${PR_BODY}

          ### NPM Package Updates
          <details><summary>Show Updates</summary>

          \`\`\`json
          ${FORMATTED_JSON}
          \`\`\`
          </details>
          "
              fi
            fi
          fi

          # Add dependabot updates section if there are any
          INCORPORATED_COUNT="${{ steps.check-dependabot-incorporate.outputs.incorporated_count }}"

          # Check if there are incorporated PRs
          HAS_INCORPORATED_PRS=false
          if [ -n "$INCORPORATED_PRS" ] && [ "$INCORPORATED_PRS" != "[]" ]; then
            PR_COUNT=$(echo "$INCORPORATED_PRS" | jq 'length')
            if [ "$PR_COUNT" -gt 0 ]; then
              HAS_INCORPORATED_PRS=true
            fi
          fi

          if [ "$INCORPORATED_COUNT" -gt 0 ] || [ "$HAS_INCORPORATED_PRS" = "true" ]; then
            # Save JSON to temp file for processing
            echo "$INCORPORATED_PRS" > /tmp/incorporated_prs.json
            
            # Validate JSON format
            if ! jq empty /tmp/incorporated_prs.json 2>/dev/null; then
              # Clean up JSON if invalid
              sed -i 's/^[[:space:]]*//g; s/[[:space:]]*$//g' /tmp/incorporated_prs.json
              if ! jq empty /tmp/incorporated_prs.json 2>/dev/null; then
                echo "[]" > /tmp/incorporated_prs.json
              fi
            fi
            
            # Create PR list
            PR_LIST_FILE=$(mktemp)
            JQ_TOTAL=$(jq 'length' /tmp/incorporated_prs.json || echo 0)
            
            if [ "$JQ_TOTAL" -gt 0 ]; then
              # Process PRs with jq
              jq -r '.[] | "- PR #\(.number): \(.title)" + (if .already_incorporated then " (previously incorporated)" else "" end)' /tmp/incorporated_prs.json > "$PR_LIST_FILE"
              
              # Count PR types
              NEWLY_ADDED=$(jq '[.[] | select(.already_incorporated == false or .already_incorporated == null)] | length' /tmp/incorporated_prs.json || echo 0)
              PREV_ADDED=$(jq '[.[] | select(.already_incorporated == true)] | length' /tmp/incorporated_prs.json || echo 0)
            else
              # Fallback processing
              echo "$INCORPORATED_PRS" | grep -o '{[^}]*}' | while read -r PR_ITEM; do
                PR_NUM=$(echo "$PR_ITEM" | grep -o '"number":[^,]*' | cut -d':' -f2 | tr -d ' "')
                PR_TITLE=$(echo "$PR_ITEM" | grep -o '"title":"[^"]*"' | cut -d':' -f2- | tr -d '"')
                ALREADY_INC=$(echo "$PR_ITEM" | grep -o '"already_incorporated":[^,}]*' | cut -d':' -f2 | tr -d ' "')
                
                if [ "$ALREADY_INC" = "true" ]; then
                  echo "- PR #${PR_NUM}: ${PR_TITLE} (previously incorporated)" >> "$PR_LIST_FILE"
                else
                  echo "- PR #${PR_NUM}: ${PR_TITLE}" >> "$PR_LIST_FILE"
                fi
              done
              
              # Manual counting for fallback
              NEWLY_ADDED=$(grep -v "previously incorporated" "$PR_LIST_FILE" | wc -l)
              PREV_ADDED=$(grep "previously incorporated" "$PR_LIST_FILE" | wc -l)
            fi
            
            # If list is empty, add basic entry
            if [ ! -s "$PR_LIST_FILE" ]; then
              echo "- Dependabot PRs were incorporated but details could not be displayed" > "$PR_LIST_FILE"
            fi
            
            # Add to PR body
            PR_BODY="${PR_BODY}

          ### Incorporated Dependabot PRs
          <details><summary>Show Incorporated PRs</summary>
          The following Dependabot PRs were incorporated:

          $(cat "$PR_LIST_FILE")
            </details>
          "
            
            # Cleanup
            rm -f "$PR_LIST_FILE" 2>/dev/null || true
          fi

          # Escape newlines for GitHub Actions output
          PR_BODY="${PR_BODY//$'\n'/%0A}"
          echo "body=$PR_BODY" >> $GITHUB_OUTPUT

      - name: Create new Pull Request with gh CLI
        if: ${{ steps.check-pr.outputs.pr_exists != 'true' && (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          PR_BRANCH: ${{ steps.check-pr.outputs.pr_branch }}
          PR_BODY: ${{ steps.pr-body.outputs.body }}
        run: |
          echo "[INFO] Preparing to create PR for branch $PR_BRANCH"

          # Verify branch exists remotely
          if ! git ls-remote --exit-code --heads origin $PR_BRANCH &>/dev/null; then
            echo "[ERROR] Branch $PR_BRANCH doesn't exist remotely - cannot create PR"
            exit 1
          fi

          # Fetch latest branch state
          git fetch origin $PR_BRANCH

          # Verify changes exist compared to master
          if git diff --quiet origin/master origin/$PR_BRANCH; then
            # Double check commits
            if [ "$(git log origin/master..origin/$PR_BRANCH --pretty=format:%H | wc -l)" -eq 0 ]; then
              echo "[INFO] No differences found between branches - skipping PR creation"
              exit 0
            fi
          fi

          # Count commits for reporting
          TOTAL_COMMITS=$(git rev-list --count origin/master..origin/$PR_BRANCH)
          DEPENDABOT_COMMITS=$(git log origin/master..origin/$PR_BRANCH --grep="incorporate Dependabot PR" --pretty=format:%H | wc -l)

          if [ "$TOTAL_COMMITS" -gt 0 ]; then
            echo "[INFO] Creating PR with $TOTAL_COMMITS commits ($DEPENDABOT_COMMITS Dependabot incorporations)"
            
            # Create the PR
            gh pr create \
              --title "chore: update npm dependencies" \
              --body "${PR_BODY//%0A/$'\n'}" \
              --base master \
              --head $PR_BRANCH
            
            echo "[SUCCESS] PR created successfully for branch $PR_BRANCH"
          else
            echo "[INFO] No commits to include in PR - skipping creation"
          fi

      - name: Add comment to existing PR about updates
        if: ${{ steps.check-pr.outputs.pr_exists == 'true' && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.check-pr.outputs.pr_number }}
          UPDATE_INFO: ${{ steps.check-updates.outputs.update_info }}
          INCORPORATED_PRS: ${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}
          ACTUAL_CHANGES: ${{ steps.update-packages.outputs.actual_changes }}
        run: |
          PR_BRANCH="${{ steps.check-pr.outputs.pr_branch }}"
          NEW_COMMITS=0

          # Instead of looking for unpushed commits, check if we made relevant updates in this run
          NPM_UPDATED=false
          DEPENDABOT_INCORPORATED=false

          # Check if we updated npm packages in this run
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ] && [ "${{ steps.update-packages.outputs.has_actual_changes }}" == "true" ]; then
            echo "[INFO] NPM packages were updated in this run"
            NPM_UPDATED=true
            NEW_COMMITS=$((NEW_COMMITS + 1))
          fi

          # Check if we incorporated Dependabot PRs in this run
          if [ -n "${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}" ]; then
            NEWLY_INCORPORATED=$(echo "${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}" | jq '[.[] | select(.already_incorporated == false)] | length')
            if [ "$NEWLY_INCORPORATED" -gt 0 ]; then
              echo "[INFO] $NEWLY_INCORPORATED Dependabot PRs were incorporated in this run"
              DEPENDABOT_INCORPORATED=true
              NEW_COMMITS=$((NEW_COMMITS + NEWLY_INCORPORATED))
            fi
          fi

          # Only proceed if relevant changes exist
          if [ "$NEW_COMMITS" -eq 0 ]; then
            echo "[INFO] No relevant dependency updates in this run - skipping comment"
            exit 0
          fi

          echo "[INFO] Found $NEW_COMMITS relevant dependency updates to comment about"

          # Prepare comment
          COMMENT_FILE=$(mktemp)
          echo "## 📦 New dependency updates added" > "$COMMENT_FILE"
          echo "" >> "$COMMENT_FILE"
          echo -n "This PR has been updated with " >> "$COMMENT_FILE"

          # Track what's included
          UPDATES_ADDED=false
          DEPENDABOT_ADDED=false

          # Add npm updates section
          if [ "$NPM_UPDATED" == "true" ]; then
            echo -n "npm package updates" >> "$COMMENT_FILE"
            UPDATES_ADDED=true
            
            # Add update details
            {
              echo ""
              echo ""
              echo "<details>"
              echo "<summary>Latest Package Updates</summary>"
              echo ""
              
              if [ -n "$ACTUAL_CHANGES" ]; then
                echo "```json"
                echo "{"
                echo "$ACTUAL_CHANGES" | sed 's/^/  /'
                echo "}"
                echo "```"
              else
                FORMATTED_JSON=$(echo "$UPDATE_INFO" | jq -r 'if type == "object" then . else . end')
                echo "```json"
                echo "$FORMATTED_JSON"
                echo "```"
              fi
              
              echo "</details>"
            } >> "$COMMENT_FILE"
          fi

          # Add Dependabot updates section
          NEWLY_INCORPORATED=$(echo "$INCORPORATED_PRS" | jq '[.[] | select(.already_incorporated == false)] | length')

          if [ "$NEWLY_INCORPORATED" -gt 0 ]; then
            # Add conjunction if needed
            if [ "$UPDATES_ADDED" == "true" ]; then
              echo -n " and " >> "$COMMENT_FILE"
            fi
            
            echo -n "Dependabot updates" >> "$COMMENT_FILE"
            DEPENDABOT_ADDED=true
            
            # Build list of PRs
            echo "$INCORPORATED_PRS" | jq -c '.[] | select(.already_incorporated == false)' | while read -r PR_ITEM; do
              PR_NUM=$(echo "$PR_ITEM" | jq -r '.number')
              PR_TITLE=$(echo "$PR_ITEM" | jq -r '.title')
              echo "- PR #${PR_NUM}: ${PR_TITLE}" >> "$COMMENT_FILE.list"
            done
            
            # Add PR details if we have any
            if [ -f "$COMMENT_FILE.list" ] && [ -s "$COMMENT_FILE.list" ]; then
              {
                echo ""
                echo ""
                echo "<details>"
                echo "<summary>Newly Incorporated Dependabot PRs</summary>"
                echo ""
                cat "$COMMENT_FILE.list"
                echo "</details>"
              } >> "$COMMENT_FILE"
            else
              DEPENDABOT_ADDED=false
            fi
            
            rm -f "$COMMENT_FILE.list" 2>/dev/null || true
          fi

          # Only post if we have content
          if [ "$UPDATES_ADDED" != "true" ] && [ "$DEPENDABOT_ADDED" != "true" ]; then
            echo "[WARNING] No update details available - skipping comment"
            exit 0
          fi

          echo "[INFO] Posting update comment to PR #$PR_NUMBER"
          gh pr comment "$PR_NUMBER" --body-file "$COMMENT_FILE"
          echo "[SUCCESS] Comment posted successfully"

          # Clean up
          rm -f "$COMMENT_FILE" 2>/dev/null || true
