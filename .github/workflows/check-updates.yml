name: Check for Package Updates
on:
  push:
    branches: [master]
  workflow_dispatch:
    inputs:
      update-packages:
        description: "Automatically update package.json (creates PR)"
        required: false
        type: boolean
        default: true
  schedule:
    - cron: "0 0 * * *"

jobs:
  check-updates:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install npm-check-updates and tools
        run: |
          npm install -g npm-check-updates
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check for Dependabot PRs
        id: check-dependabot
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "[INFO] Scanning for open Dependabot PRs"
          # Find all open Dependabot PRs using multiple detection strategies
          # 1. By author name AND
          # 2. By PR title prefix "Bump"
          DEPENDABOT_PRS=$(gh pr list --state open --json number,title,headRefName,author,state --jq '[.[] | select(((.author.login == "dependabot[bot]" or .author.login == "dependabot") or (.title | startswith("Bump "))) and .state == "OPEN") | {number: .number, title: .title, branch: .headRefName, state: .state}]')

          DEPENDABOT_COUNT=$(echo "$DEPENDABOT_PRS" | jq 'length')
          echo "[INFO] Found $DEPENDABOT_COUNT Dependabot PR(s)"

          if [ "$DEPENDABOT_COUNT" -gt 0 ]; then
            echo "[SUCCESS] Dependabot PRs detected"
            echo "has_dependabot_prs=true" >> $GITHUB_OUTPUT
            echo "dependabot_prs<<EOF" >> $GITHUB_OUTPUT
            echo "$DEPENDABOT_PRS" >> $GITHUB_OUTPUT 
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "[INFO] No Dependabot PRs found"
            echo "has_dependabot_prs=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PR
        id: check-pr
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true) || github.event_name != 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          PR_EXISTS=$(gh pr list --json number,title,headRefName --jq '.[] | select(.title == "chore: update npm dependencies" and (.headRefName | startswith("deps/update-packages"))) | .number')
          if [ -n "$PR_EXISTS" ]; then
            echo "[INFO] Existing dependency update PR found: #$PR_EXISTS"
            echo "pr_exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR_EXISTS" >> $GITHUB_OUTPUT
            PR_BRANCH=$(gh pr view $PR_EXISTS --json headRefName --jq '.headRefName')
            echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "[INFO] No existing dependency update PR found - will create new PR"
            echo "pr_exists=false" >> $GITHUB_OUTPUT
            echo "pr_branch=deps/update-packages" >> $GITHUB_OUTPUT
          fi

      - name: Set default PR branch
        id: set-default-branch
        if: ${{ steps.check-pr.outputs.pr_branch == '' || steps.check-pr.outputs.pr_branch == null || !contains(toJson(steps.check-pr.outputs), 'pr_branch') }}
        run: |
          echo "[INFO] Setting default PR branch to deps/update-packages"
          echo "pr_branch=deps/update-packages" >> $GITHUB_OUTPUT

      - name: Checkout or create update branch
        id: checkout
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        run: |
          # Determine the correct PR branch name
          PR_BRANCH="${{ steps.check-pr.outputs.pr_branch }}"
          if [ -z "$PR_BRANCH" ]; then
            # Fallback to default branch if not set
            PR_BRANCH="${{ steps.set-default-branch.outputs.pr_branch }}"
            if [ -z "$PR_BRANCH" ]; then
              # Hardcoded fallback
              PR_BRANCH="deps/update-packages"
              echo "[WARNING] Using hardcoded PR branch name: $PR_BRANCH"
            fi
          fi
          echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT

          echo "[INFO] Setting up branch: $PR_BRANCH"
          LOCAL_BRANCH_EXISTS=false
          REMOTE_BRANCH_EXISTS=false

          if git show-ref --verify --quiet refs/heads/$PR_BRANCH; then
            LOCAL_BRANCH_EXISTS=true
          fi

          if git ls-remote --exit-code --heads origin "$PR_BRANCH" &>/dev/null; then
            REMOTE_BRANCH_EXISTS=true
          fi

          git fetch origin --prune

          # Check if we have Dependabot PRs to incorporate
          if [ "${{ steps.check-dependabot.outputs.has_dependabot_prs }}" == "true" ]; then
            # If we have Dependabot PRs, use existing branch if available
            if [ "$LOCAL_BRANCH_EXISTS" = "true" ]; then
              echo "[INFO] Checking out existing local branch"
              git checkout "$PR_BRANCH"
            elif [ "$REMOTE_BRANCH_EXISTS" = "true" ]; then
              echo "[INFO] Checking out existing remote branch"
              git checkout -b "$PR_BRANCH" "origin/$PR_BRANCH"
            else
              echo "[INFO] Creating new branch"
              git checkout -b "$PR_BRANCH"
            fi

            if [ "$REMOTE_BRANCH_EXISTS" = "true" ]; then
              git pull origin "$PR_BRANCH" || true
            fi
          else
            # If no Dependabot PRs to incorporate, create fresh branch from master
            echo "[INFO] No Dependabot PRs found, creating fresh branch from master"
            
            # Delete local branch if it exists
            if [ "$LOCAL_BRANCH_EXISTS" = "true" ]; then
              git checkout master
              git branch -D "$PR_BRANCH"
            fi
            
            # Create a fresh branch from master
            git checkout -b "$PR_BRANCH" master
            
            # If remote branch exists, we'll force push later to reset it
            if [ "$REMOTE_BRANCH_EXISTS" = "true" ]; then
              echo "[INFO] Remote branch exists but will be reset to clean state"
            fi
          fi

      - name: Incorporate Dependabot PRs
        id: check-dependabot-incorporate
        if: ${{ steps.check-dependabot.outputs.has_dependabot_prs == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          DEPENDABOT_PRS: ${{ steps.check-dependabot.outputs.dependabot_prs }}
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Create a file to track successfully incorporated PRs
          TEMP_PR_FILE="/tmp/incorporated_prs.json"
          echo "[]" > $TEMP_PR_FILE
          PACKAGE_JSON_CHANGED=false
          INCORPORATED_COUNT=0

          echo "[INFO] Processing Dependabot PRs"

          # Check commit history to identify already incorporated PRs
          ALREADY_INCORPORATED=()
          COMMIT_LOG=$(git log --grep="incorporate Dependabot PR" --oneline)

          if [[ -n "$COMMIT_LOG" ]]; then
            echo "$DEPENDABOT_PRS" | jq -c '.[]' | while read -r PR_INFO; do
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
              if git log --grep="incorporate Dependabot PR #$PR_NUMBER" --oneline | grep -q .; then
                echo "[INFO] PR #$PR_NUMBER is already incorporated, skipping"
                ALREADY_INCORPORATED+=($PR_NUMBER)
                
                # Add to incorporated PRs tracking
                jq --arg num "$PR_NUMBER" --arg title "$(echo "$PR_INFO" | jq -r '.title')" \
                  '. += [{"number": $num, "title": $title, "already_incorporated": true}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
                
                INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
              fi
            done
          fi

          # Process each Dependabot PR
          echo "$DEPENDABOT_PRS" | jq -c '.[]' | while read -r PR_INFO; do
            PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
            PR_BRANCH=$(echo "$PR_INFO" | jq -r '.branch')
            PR_TITLE=$(echo "$PR_INFO" | jq -r '.title')
            PR_STATE=$(echo "$PR_INFO" | jq -r '.state')
            
            # Skip if already incorporated
            if [[ " ${ALREADY_INCORPORATED[@]} " =~ " ${PR_NUMBER} " ]]; then
              echo "[INFO] PR #$PR_NUMBER already incorporated in this branch, skipping"
              continue
            fi
            
            # Verify PR is still open before incorporation
            if [ "$PR_STATE" != "OPEN" ]; then
              echo "[INFO] PR #$PR_NUMBER is not open (state: $PR_STATE), skipping"
              continue
            fi
            
            # Double-check PR state directly with GitHub API
            PR_CURRENT_STATE=$(gh pr view "$PR_NUMBER" --json state --jq '.state' 2>/dev/null || echo "UNKNOWN")
            if [ "$PR_CURRENT_STATE" != "OPEN" ]; then
              echo "[INFO] PR #$PR_NUMBER is currently $PR_CURRENT_STATE, skipping"
              continue
            fi
            
            echo "[INFO] Incorporating PR #$PR_NUMBER: $PR_TITLE"
            
            # Check if this is a package update PR
            IS_PACKAGE_UPDATE=$(echo "$PR_BRANCH" | grep -q "npm_and_yarn" && echo "true" || echo "false")
            
            # Fetch the Dependabot branch
            git fetch origin "$PR_BRANCH" || { echo "[ERROR] Failed to fetch $PR_BRANCH, skipping"; continue; }
            
            # For package updates, take snapshot of package.json
            if [ "$IS_PACKAGE_UPDATE" = "true" ] && [ -f package.json ]; then
              BEFORE_PACKAGE_CONTENT=$(cat package.json)
            fi
            
            # Try to merge the branch
            if git merge --no-commit --no-ff "origin/$PR_BRANCH"; then
              git_status_output=$(git status --porcelain)
              
              if [ -n "$git_status_output" ]; then
                echo "[SUCCESS] Merged changes from PR #$PR_NUMBER"
                
                # For package updates, verify changes were made
                if [ "$IS_PACKAGE_UPDATE" = "true" ] && [ -f package.json ]; then
                  AFTER_PACKAGE_CONTENT=$(cat package.json)
                  if [ "$BEFORE_PACKAGE_CONTENT" != "$AFTER_PACKAGE_CONTENT" ]; then
                    echo "[SUCCESS] package.json was updated by merge"
                    PACKAGE_JSON_CHANGED=true
                  else
                    echo "[WARNING] package.json content didn't change after merge"
                  fi
                fi
                
                # Update package-lock if needed
                if [ "$IS_PACKAGE_UPDATE" = "true" ] && [ -f package.json ] && [ -f package-lock.json ]; then
                  npm install --package-lock-only || true
                fi
                
                # Commit the changes
                git add --all
                git commit -m "chore: incorporate Dependabot PR #$PR_NUMBER ($PR_TITLE)"
                
                INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
                
                # Track this PR incorporation
                jq --arg num "$PR_NUMBER" --arg title "$PR_TITLE" '. += [{"number": $num, "title": $title, "already_incorporated": false}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
              else
                echo "[INFO] No changes to commit for PR #$PR_NUMBER"
                git merge --abort || true
              fi
            else
              echo "[WARNING] Merge conflict with PR #$PR_NUMBER, attempting alternate approach"
              git merge --abort
              
              # For package updates with conflicts, try direct approach
              if [ "$IS_PACKAGE_UPDATE" = "true" ]; then
                git checkout -b temp-dependabot-$PR_NUMBER "origin/$PR_BRANCH"
                
                if [ -f package.json ]; then
                  # Parse package details from PR title
                  if [[ "$PR_TITLE" =~ Bump[[:space:]]([^[:space:]]+)[[:space:]]from[[:space:]]([^[:space:]]+)[[:space:]]to[[:space:]]([^[:space:]]+) ]]; then
                    PACKAGE_NAME="${BASH_REMATCH[1]}"
                    OLD_VERSION="${BASH_REMATCH[2]}"
                    NEW_VERSION="${BASH_REMATCH[3]}"
                    
                    echo "[INFO] Attempting direct update: $PACKAGE_NAME to $NEW_VERSION"
                    
                    # Return to update branch
                    git checkout ${{ steps.check-pr.outputs.pr_branch }}
                    
                    # Update package directly
                    npm install $PACKAGE_NAME@$NEW_VERSION || true
                    
                    # Commit if changed
                    if git diff --quiet package.json package-lock.json; then
                      echo "[INFO] No changes detected in package files"
                    else
                      echo "[SUCCESS] Updated $PACKAGE_NAME to $NEW_VERSION"
                      PACKAGE_JSON_CHANGED=true
                      git add package.json package-lock.json
                      git commit -m "chore: incorporate Dependabot PR #$PR_NUMBER (update $PACKAGE_NAME to $NEW_VERSION)"
                      
                      INCORPORATED_COUNT=$((INCORPORATED_COUNT + 1))
                      
                      # Track this PR incorporation
                      jq --arg num "$PR_NUMBER" --arg title "$PR_TITLE" '. += [{"number": $num, "title": $title, "already_incorporated": false}]' "$TEMP_PR_FILE" > "${TEMP_PR_FILE}.tmp" && mv "${TEMP_PR_FILE}.tmp" "$TEMP_PR_FILE"
                    fi
                  fi
                fi
                
                # Clean up temporary branch
                git branch -D temp-dependabot-$PR_NUMBER || true
              fi
            fi
          done

          # Set outputs for next steps
          echo "package_json_changed=$PACKAGE_JSON_CHANGED" >> $GITHUB_OUTPUT
          echo "incorporated_count=$INCORPORATED_COUNT" >> $GITHUB_OUTPUT
          echo "incorporated_prs<<EOF" >> $GITHUB_OUTPUT
          cat "$TEMP_PR_FILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Report summary of incorporated PRs
          NEWLY_INCORPORATED=$(cat "$TEMP_PR_FILE" | jq '[.[] | select(.already_incorporated == false)] | length')
          echo "[INFO] Dependabot incorporation complete: $NEWLY_INCORPORATED new, $((INCORPORATED_COUNT - NEWLY_INCORPORATED)) previously incorporated"

      - name: Check for package updates
        id: check-updates
        run: |
          # Capture ncu output for updates
          NCU_OUTPUT=$(ncu)

          # Add to step summary
          echo "## 📦 Package Updates Available" >> $GITHUB_STEP_SUMMARY
          echo "The following packages can be updated:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "$NCU_OUTPUT" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "To update all packages, run: npm run update" >> $GITHUB_STEP_SUMMARY

          # Capture update info in structured format
          UPDATE_INFO=$(ncu --jsonUpgraded)
          echo "update_info<<EOF" >> $GITHUB_OUTPUT
          echo "$UPDATE_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Check if there are updates
          UPDATE_COUNT=$(echo "$UPDATE_INFO" | jq 'length')
          if [ "$UPDATE_COUNT" -gt 0 ]; then
            echo "[INFO] Found $UPDATE_COUNT package updates available"
            echo "has_updates=true" >> $GITHUB_OUTPUT
          else
            echo "[INFO] No package updates found"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Update packages with npm-check-updates
        id: update-packages
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true) || (github.event_name != 'workflow_dispatch' && steps.check-updates.outputs.has_updates == 'true') }}
        run: |
          # Capture package.json before updates
          cp package.json /tmp/package.json.before

          # Update packages
          echo "[INFO] Updating packages to latest versions"
          ncu -u

          # Capture actual changes made
          if [ -f /tmp/package.json.before ] && [ -f package.json ]; then
            # Create a temporary file for the package diff to avoid shell escaping issues
            DIFF_FILE=$(mktemp)
            diff -u /tmp/package.json.before package.json | grep -E '^\+.*".*":.*".*"' | grep -v "+++" | sed 's/^+//g' | sed 's/,//g' | sed 's/^ *//g' > "$DIFF_FILE"
            
            if [ -s "$DIFF_FILE" ]; then
              echo "[INFO] Package updates detected"
              echo "actual_changes<<EOF" >> $GITHUB_OUTPUT
              cat "$DIFF_FILE" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "has_actual_changes=true" >> $GITHUB_OUTPUT
              
              # Debug output
              echo "[DEBUG] Detected package changes:"
              cat "$DIFF_FILE"
            else
              echo "[INFO] No actual changes detected in package.json"
              echo "has_actual_changes=false" >> $GITHUB_OUTPUT
            fi
            
            # Clean up
            rm -f "$DIFF_FILE" 2>/dev/null || true
          else
            echo "[WARNING] Could not compare package.json changes"
            echo "has_actual_changes=false" >> $GITHUB_OUTPUT
          fi

          # Install updated packages
          echo "[INFO] Installing updated packages"
          npm install

      - name: Commit package updates
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && steps.check-updates.outputs.has_updates == 'true' }}
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add package.json package-lock.json
          git diff --staged --quiet || git commit -m "chore: update npm dependencies"

      - name: Push changes to branch
        id: push-changes
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.update-packages == true || github.event_name != 'workflow_dispatch') && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        run: |
          # Use branch name from previous steps, or fallback to default
          PR_BRANCH="${{ steps.checkout.outputs.pr_branch }}"
          if [ -z "$PR_BRANCH" ]; then
            PR_BRANCH="${{ steps.check-pr.outputs.pr_branch }}"
            if [ -z "$PR_BRANCH" ]; then
              PR_BRANCH="${{ steps.set-default-branch.outputs.pr_branch }}"
              if [ -z "$PR_BRANCH" ]; then
                # Hardcoded fallback
                PR_BRANCH="deps/update-packages"
                echo "[WARNING] Using hardcoded PR branch name: $PR_BRANCH"
              fi
            fi
          fi

          echo "[INFO] Using branch: $PR_BRANCH"
          BRANCH_EXISTS_REMOTELY=false
          FORCE_PUSH=false

          # First ensure we're on the correct branch locally
          if ! git show-ref --verify --quiet refs/heads/$PR_BRANCH; then
            echo "[INFO] Creating local branch $PR_BRANCH"
            git checkout -b $PR_BRANCH
          else
            echo "[INFO] Checking out existing local branch $PR_BRANCH"
            git checkout $PR_BRANCH
          fi

          # Check if branch exists remotely
          if git ls-remote --exit-code --heads origin "$PR_BRANCH" &>/dev/null; then
            BRANCH_EXISTS_REMOTELY=true
            
            # Determine if this is a fresh branch or has Dependabot PRs
            if [ "${{ steps.check-dependabot.outputs.has_dependabot_prs }}" != "true" ]; then
              # If no Dependabot PRs, we want to force push
              echo "[INFO] Fresh branch without Dependabot PRs - will force push"
              FORCE_PUSH=true
            else
              echo "[INFO] Branch exists remotely, handling divergent branches"
              
              git fetch origin "$PR_BRANCH"
              
              # Save our current changes to a patch file
              git diff > /tmp/our_changes.patch
              
              # Reset to the remote branch
              echo "[INFO] Resetting to remote branch state"
              git reset --hard "origin/$PR_BRANCH"
              
              # Apply our changes on top of the remote branch
              if [ -s /tmp/our_changes.patch ]; then
                echo "[INFO] Applying our changes on top of remote branch"
                if git apply /tmp/our_changes.patch; then
                  echo "[SUCCESS] Applied local changes successfully"
                else
                  echo "[WARNING] Could not apply local changes cleanly, continuing with remote state"
                fi
              fi
            fi
          fi

          # Check for unpushed changes
          if [ "$BRANCH_EXISTS_REMOTELY" = "true" ] && [ "$FORCE_PUSH" = "false" ]; then
            UNPUSHED_COUNT=$(git rev-list --count "origin/$PR_BRANCH..HEAD" 2>/dev/null || echo "0")
          else
            # If branch doesn't exist remotely or we're force pushing, all commits are unpushed
            UNPUSHED_COUNT=$(git rev-list --count HEAD 2>/dev/null || echo "0")
          fi

          # Add any changes we might have applied from the patch
          git add -A
          if ! git diff --cached --quiet; then
            echo "[INFO] Committing applied changes"
            git commit -m "chore: update dependencies via workflow"
            UNPUSHED_COUNT=$((UNPUSHED_COUNT + 1))
          fi

          if [ "$FORCE_PUSH" = "true" ]; then
            echo "[INFO] Force pushing fresh branch to remote"
            git push -u --force origin "$PR_BRANCH"
          elif [ "$UNPUSHED_COUNT" -gt 0 ]; then
            echo "[INFO] Pushing $UNPUSHED_COUNT new commits to branch"
            # Force push with lease to ensure we don't overwrite changes we haven't seen
            git push -u --force-with-lease origin "$PR_BRANCH" || git push -u --force origin "$PR_BRANCH"
          elif [ "$BRANCH_EXISTS_REMOTELY" = "false" ]; then
            echo "[INFO] Pushing branch to remote for first time"
            git push -u origin "$PR_BRANCH"
          else
            echo "[INFO] No new commits to push"
          fi

          # Verify branch exists remotely
          if git ls-remote --exit-code --heads origin "$PR_BRANCH" &>/dev/null; then
            echo "[SUCCESS] Branch $PR_BRANCH exists remotely"
            echo "pr_branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] Failed to push branch $PR_BRANCH to remote"
            exit 1
          fi

      - name: Add comment to existing PR about updates
        if: ${{ steps.check-pr.outputs.pr_exists == 'true' && (steps.check-updates.outputs.has_updates == 'true' || steps.check-dependabot.outputs.has_dependabot_prs == 'true') }}
        env:
          GITHUB_TOKEN: ${{ secrets.PULL_REQUEST_TOKEN || secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.check-pr.outputs.pr_number }}
          UPDATE_INFO: ${{ steps.check-updates.outputs.update_info }}
          INCORPORATED_PRS: ${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}
          ACTUAL_CHANGES: ${{ steps.update-packages.outputs.actual_changes }}
        run: |
          PR_BRANCH="${{ steps.check-pr.outputs.pr_branch }}"
          NEW_COMMITS=0

          # Check if we made relevant updates in this run
          NPM_UPDATED=false
          DEPENDABOT_INCORPORATED=false

          # Check if we updated npm packages in this run
          if [ "${{ steps.check-updates.outputs.has_updates }}" = "true" ] && [ "${{ steps.update-packages.outputs.has_actual_changes }}" = "true" ]; then
            echo "[INFO] NPM packages were updated in this run"
            NPM_UPDATED=true
            NEW_COMMITS=$((NEW_COMMITS + 1))
          fi

          # Check if we incorporated Dependabot PRs in this run
          if [ -n "${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}" ]; then
            # Put the JSON into a file to avoid shell quoting issues
            echo '${{ steps.check-dependabot-incorporate.outputs.incorporated_prs }}' > /tmp/dependabot_incorporated.json
            NEWLY_INCORPORATED=$(jq '[.[] | select(.already_incorporated == false)] | length' /tmp/dependabot_incorporated.json)
            if [ "$NEWLY_INCORPORATED" -gt 0 ]; then
              echo "[INFO] $NEWLY_INCORPORATED Dependabot PRs were incorporated in this run"
              DEPENDABOT_INCORPORATED=true
              NEW_COMMITS=$((NEW_COMMITS + NEWLY_INCORPORATED))
            fi
          fi

          # Only proceed if relevant changes exist
          if [ "$NEW_COMMITS" -eq 0 ]; then
            echo "[INFO] No relevant dependency updates in this run - skipping comment"
            exit 0
          fi

          echo "[INFO] Found $NEW_COMMITS relevant dependency updates to comment about"

          # Create the PR comment
          COMMENT_FILE=$(mktemp)

          # Write the header
          cat > "$COMMENT_FILE" << EOF
          ## 📦 New dependency updates added

          This PR has been updated with npm package updates

          <details>
          <summary>Latest Package Updates</summary>

          \`\`\`json
          EOF

          # Flag to track if we successfully added package info
          PACKAGE_INFO_ADDED=false

          # Try to use UPDATE_INFO directly if it's valid JSON 
          if [ -n "$UPDATE_INFO" ] && echo "$UPDATE_INFO" | jq empty >/dev/null 2>&1; then
            echo "$UPDATE_INFO" >> "$COMMENT_FILE"
            PACKAGE_INFO_ADDED=true
          # If UPDATE_INFO isn't valid, extract package info from ACTUAL_CHANGES and format as JSON
          elif [ -n "$ACTUAL_CHANGES" ]; then
            echo "{" >> "$COMMENT_FILE"
            FIRST_ENTRY=true
            
            echo "$ACTUAL_CHANGES" | while IFS= read -r line; do
              if [ -n "$line" ]; then
                # Extract package name and version
                if [[ "$line" =~ \"([^\"]+)\":[[:space:]]*\"([^\"]+)\" ]]; then
                  PACKAGE="${BASH_REMATCH[1]}"
                  VERSION="${BASH_REMATCH[2]}"
                  
                  # Add comma before all but the first entry
                  if [ "$FIRST_ENTRY" = "true" ]; then
                    FIRST_ENTRY=false
                  else
                    echo "," >> "$COMMENT_FILE"
                  fi
                  
                  # Write as JSON key-value pair
                  echo "  \"$PACKAGE\": \"$VERSION\"" >> "$COMMENT_FILE"
                  PACKAGE_INFO_ADDED=true
                fi
              fi
            done
            
            echo "" >> "$COMMENT_FILE"
            echo "}" >> "$COMMENT_FILE"
          fi

          # If no valid package info was added, add error message
          if [ "$PACKAGE_INFO_ADDED" != "true" ]; then
            cat >> "$COMMENT_FILE" << EOF
          {
            "error": "Unable to retrieve package update details. Package updates were made, but the specific version information couldn't be extracted. Please check the workflow logs for more details."
          }
          EOF
          fi

          # Close the code block and details
          cat >> "$COMMENT_FILE" << EOF
          \`\`\`
          </details>
          EOF

          # Add Dependabot section if needed
          if [ "$DEPENDABOT_INCORPORATED" = "true" ]; then
            # Create a temp file for INCORPORATED_PRS to safely process
            DEPENDABOT_FILE=$(mktemp)
            echo "$INCORPORATED_PRS" > "$DEPENDABOT_FILE"
            
            # Build list of PRs
            PR_LIST=$(jq -r '.[] | select(.already_incorporated == false) | "- PR #\(.number): \(.title)"' "$DEPENDABOT_FILE" 2>/dev/null)
            
            if [ -n "$PR_LIST" ]; then
              cat >> "$COMMENT_FILE" << EOF

          <details>
          <summary>Newly Incorporated Dependabot PRs</summary>

          $PR_LIST
          </details>
          EOF
            fi
            
            # Clean up
            rm -f "$DEPENDABOT_FILE" 2>/dev/null || true
          fi

          # Post the comment
          echo "[INFO] Posting update comment to PR #$PR_NUMBER"
          gh pr comment "$PR_NUMBER" --body-file "$COMMENT_FILE"
          echo "[SUCCESS] Comment posted successfully"

          # Clean up
          rm -f "$COMMENT_FILE" 2>/dev/null || true
